#

'''
NBBBBBBB - this code has been replaced with R code available in the BTM/LDA folders
THIS IS OUT DATED


Groups tweets with the same topic together.

NOTE: the BTM algorithm needs to be run first such that it's output can be used
here

Process:
1. Combine BTM Topic modelling outputs and tweet corpus
2. Group tweet corpus together according to the highest probable topic that they
are in

What to do with the data / Next steps after running this code:
- Need to compare topics identified in the BTM terminal output with this output
(note that the columns get sorted according to the highest probable topic in
this code, just like with the BTM output). The sorted probabilities are also
saved in a csv for cross-referencing.

'''
import pandas as pd
import numpy as np
# plotting
from collections import Counter
import matplotlib.pyplot as plt

# TODO: still need to update these files with the largest community's topic modelling files
# file paths
CONFUSION_MATRIX_INPUT_FILE_PZ_D = "datain/topic_modelling/k20.pz_d"
TOPIC_PROBABILITIES_INTPUT_FILE_PZ = "datain/topic_modelling/k20.pz"
TWEET_CORPUS_INPUT_FILE = "datain/topic_modelling/cleaned_tweets.csv"

TOPIC_OUTPUT_FILE = "datain/sentiment/grouped-by-topic_with_date.csv"
# TOPIC_OUTPUT_FILE = "datain/sentiment/largest_community_grouped-by-topic_with_date.csv"

def run():
    '''
    Main running code that executes all topic modelling functions in the
    correct order for the pipeline.
    '''
    print("Applying topic modelling to BTM output and cleaned corpus...")
    confusion_matrix, topic_probabilities, tweet_corpus = load_data()

    # sort confusion matrix according to highest topic probability
    df = confusion_matrix.T
    df['probs'] = topic_probabilities
    df = df.sort_values(by='probs', ascending=False).T

    # rename columns from 1-k (K being the number of columns)
    mapping = {col_name: i for col_name, i in zip(df.columns, range(20))}
    df = df.rename(mapping, axis=1)

    # add tweet corpus data to the confusion matrix
    df.insert(0, "created_at", tweet_corpus["created_at"])
    df.insert(1, "corpus", tweet_corpus["corpus"])
    df.insert(2, "cleaned_tweet", tweet_corpus["cleaned_tweet"])
    # remove the topic probability row (used to sort the dataframe)
    df = df.drop("probs")

    # group topics and export selected columns to csv
    df = group_topics(df)
    selected_columns = ["maxtopic", "created_at", "corpus", "cleaned_tweet"]
    df.to_csv(TOPIC_OUTPUT_FILE, columns = selected_columns)

    plot_topic_ratio(df)
    print("Finished topic modelling...")


def load_data():
    '''
    Import BTM output (pz_w - confusion_matrix; pz - topic_probabilities) and
    cleaned corpus DataFrame generated by clean_corpus.py.

    @return confusion_matrix, topic_probabilities, tweet_corpus
    '''

    # load confusion matrix (pz_d) BTM output
    confusion_matrix = np.loadtxt(CONFUSION_MATRIX_INPUT_FILE_PZ_D)
    confusion_matrix = pd.DataFrame(confusion_matrix)

    # load topic label probabilities (pz) BTM output
    topic_probabilities = np.loadtxt(TOPIC_PROBABILITIES_INTPUT_FILE_PZ)

    # load teet corpus data
    tweet_corpus = pd.read_csv(TWEET_CORPUS_INPUT_FILE)
    tweet_corpus = tweet_corpus.drop("Unnamed: 0", axis=1)

    return confusion_matrix, topic_probabilities, tweet_corpus

def group_topics(csv):
    '''
    Group topics according to their most probable topic classification according
    to the confusion_matrix.

    @param csv - DataFrame with combined values from confusion_matrix and tweet_corpus
    @return DataFrame grouped/sorted according to their maximum probable topic
    '''
    # get the columns representing the topics
    topics = list(csv.columns[3:])

    # selecting only the columns that denote probabilities for each topic
    maxtopic = csv[topics]
    # get the topic with the max probability value for each row
    maxtopic = maxtopic.idxmax(axis=1)
    # replace all NaN values with 100
    maxtopic = maxtopic.fillna(100)
    # convert all topics from string ('15') to int (15). This prerpares it for grouping by topic
    maxtopic = maxtopic.astype(int)
    # add this as a new column
    csv.insert(0, "maxtopic", maxtopic)

    # group by topic
    return csv.sort_values('maxtopic')

def plot_topic_ratio(csv):
    # count the number of tweets per topic
    topic2occurrences = Counter(csv['maxtopic'])
    topic2occurrences['No Topic'] = topic2occurrences[100]
    del topic2occurrences[100]

    # Plot ratio of tweets per topic
    ys = []
    labels = []
    for topic, occurrences in topic2occurrences.items():
        labels.append(topic)
        ys.append(occurrences)

    plt.pie(ys, labels=labels)
    plt.title('Ratio of tweets per topic')
    plt.savefig('dataout/topic_modelling/topic_ratios.jpeg')
    plt.close()

if __name__ == "__main__":
    run()
